import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { addProduct } from "../api/productApi";
import { fetchCategory } from "../api/CategoryApi";

const AddProduct: React.FC = () => {
  const [name, setName] = useState("");
  const [price, setPrice] = useState<number>(0);
  const [description, setDescription] = useState("");
  const [image, setImage] = useState<File | null>(null);
  const [category, setCategory] = useState("");
  const [rating, setRating] = useState<number>(5);
  const [countInStock, setCountInStock] = useState<number>(10);
  const [categories, setCategories] = useState<{ _id: string; name: string }[]>(
    []
  );
  const [loadingCategories, setLoadingCategories] = useState<boolean>(true);

  const { getToken } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const categoriesData = await fetchCategory();
        setCategories(categoriesData);
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh m·ª•c s·∫£n ph·∫©m:", error);
      } finally {
        setLoadingCategories(false);
      }
    };

    fetchCategories();
  }, []);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setImage(e.target.files[0]);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const token = getToken();
    if (!token) {
      alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p!");
      return;
    }

    const formData = new FormData();
    formData.append("name", name);
    formData.append("price", price.toString());
    formData.append("description", description);
    formData.append("category", category);
    formData.append("rating", rating.toString());
    formData.append("countInStock", countInStock.toString());
    if (image) formData.append("image", image);

    try {
      await addProduct(formData, token);
      alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
      navigate("/admin/products");
    } catch (error) {
      alert("Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  return (
    <div className="max-w-4xl mx-auto px-6 py-10">
      <div className="bg-white rounded-2xl shadow-xl p-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-8 text-center">
          üéâ Th√™m S·∫£n Ph·∫©m M·ªõi
        </h1>

        <form
          onSubmit={handleSubmit}
          className="grid grid-cols-1 md:grid-cols-2 gap-6"
        >
          {/* T√™n s·∫£n ph·∫©m */}
          <div>
            <label className="block text-sm font-semibold text-gray-600 mb-1">
              T√™n s·∫£n ph·∫©m
            </label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            />
          </div>

          {/* Gi√° s·∫£n ph·∫©m */}
          <div>
            <label className="block text-sm font-semibold text-gray-600 mb-1">
              Gi√° s·∫£n ph·∫©m
            </label>
            <input
              type="number"
              value={price}
              onChange={(e) => setPrice(Number(e.target.value))}
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            />
          </div>

          {/* M√¥ t·∫£ */}
          <div className="md:col-span-2">
            <label className="block text-sm font-semibold text-gray-600 mb-1">
              M√¥ t·∫£ s·∫£n ph·∫©m
            </label>
            <textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows={4}
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            />
          </div>

          {/* Danh m·ª•c */}
          <div>
            <label className="block text-sm font-semibold text-gray-600 mb-1">
              Danh m·ª•c
            </label>
            {loadingCategories ? (
              <div className="text-gray-500 italic">ƒêang t·∫£i danh m·ª•c...</div>
            ) : (
              <select
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
                required
              >
                <option value="">-- Ch·ªçn danh m·ª•c --</option>
                {categories.map((cat) => (
                  <option key={cat._id} value={cat._id}>
                    {cat.name}
                  </option>
                ))}
              </select>
            )}
          </div>

          {/* ƒê√°nh gi√° */}
          <div>
            <label className="block text-sm font-semibold text-gray-600 mb-1">
              ƒê√°nh gi√° (1-5)
            </label>
            <input
              type="number"
              value={rating}
              onChange={(e) => setRating(Number(e.target.value))}
              min="1"
              max="5"
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            />
          </div>

          {/* S·ªë l∆∞·ª£ng c√≤n l·∫°i */}
          <div>
            <label className="block text-sm font-semibold text-gray-600 mb-1">
              S·ªë l∆∞·ª£ng trong kho
            </label>
            <input
              type="number"
              value={countInStock}
              onChange={(e) => setCountInStock(Number(e.target.value))}
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            />
          </div>

          {/* H√¨nh ·∫£nh */}
          <div className="md:col-span-2">
            <label className="block text-sm font-semibold text-gray-600 mb-2">
              ·∫¢nh s·∫£n ph·∫©m
            </label>
            <div className="flex items-center gap-4">
              <label className="cursor-pointer flex items-center gap-2 bg-white border border-dashed border-gray-300 rounded-lg px-4 py-3 hover:bg-gray-50">
                <svg
                  className="w-6 h-6 text-blue-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M4 16l4-4m0 0l4 4m-4-4v12M20 16V4a2 2 0 00-2-2H6a2 2 0 00-2 2v12"
                  />
                </svg>
                <span className="text-sm">Ch·ªçn ·∫£nh</span>
                <input
                  type="file"
                  onChange={handleImageChange}
                  className="hidden"
                />
              </label>
              {image && (
                <span className="text-sm text-gray-700">{image.name}</span>
              )}
            </div>
          </div>

          {/* N√∫t submit */}
          <div className="md:col-span-2 flex justify-end">
            <button
              type="submit"
              className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition duration-200"
            >
              Th√™m s·∫£n ph·∫©m
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddProduct;
